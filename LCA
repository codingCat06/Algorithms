const int MAXN = 100000;
const int MAXLN = 20;
vector<int> tree[MAXN+5];
int depth[MAXN+5];
int par[MAXN+5][MAXLN];

void dfs(int n, int p) {
    for (int next:tree[n]) {
        if (next == p) continue;
        depth[next] = depth[n]+1, par[next][0]=n;
        dfs(next,n);
    }
}

void prepare_lca() {
    const int root = 1;
    dfs(root, -1);
    par[root][0] = root;
    for (int i=1;i<MAXLN;++i) for (int j=1;j<=MAXN;++j) par[j][i] = par[par[j][i-1]][i-1];
}

int lca(int u, int v) {
    if (depth[u]<depth[v]) swap(u,v);
    for (int i=MAXLN-1;i>=0;--i) {
        if (depth[u]-(1<<i)>=depth[v]) u=par[u][i];
    }
    if (u==v) return u;
    for (int i=MAXLN-1;i>=0;--i) {
        if (par[u][i]!=par[v][i]) u=par[u][i], v=par[v][i];
    }
    return par[u][0];
}
